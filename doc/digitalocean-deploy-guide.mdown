### Deploy Rails app to digitalocean with nginx, unicorn, capistrano & postgres

Create droplet of your liking (ubuntu 12.10 x32)

ssh to server as root with the server ip

    ssh root@123.123.123.123

Change the root user password to something more secure:

    passwd

Create new user and give it a password:

    adduser username

Set new users privileges on server

    visudo

Find user privileges section

    # User privilege specification
    root  ALL=(ALL:ALL) ALL

Add your new user privileges under root, then hit cntrl+x and then y to save, and Enter to exit editor

    username ALL=(ALL:ALL) ALL

Configure SSH on server

    nano /etc/ssh/sshd_config

Find and change port to one that isn't default to be more secure (22 is default: choose between 1025
..65536)

    Port 22 # change this to whatever port you wish to use
    Protocol 2
    PermitRootLogin no

Add to bottom of sshd_config file after changing port (cntrl+x then y to save, then Enter to exit editor)

    UseDNS no
    AllowUsers username

Reload ssh on server

    reload ssh

Don't close root! Open new shell and ssh to vps with new username (remember the port, or you're locked out!)

    ssh -p 1026 username@123.123.123.123

Update packages on server

    sudo apt-get update
    sudo apt-get install curl

install latest stable version of rvm on server

    curl -L get.rvm.io | bash -s stable

load rvm on server

    source ~/.rvm/scripts/rvm

install rvm dependencies on server

    rvm requirements

Install ruby 2.0.0 on server

    rvm install 2.0.0 (or rvm install 1.9.3 for a different version)

Use 2.0.0 as rvm default on server

    rvm use 2.0.0 --default (rvm use 1.9.3 --default)

install latest version of rubygems if rvm install didn't

    rvm rubygems current

install rails gem on server

    gem install rails --no-ri --no-rdoc

install capistrano on server (for version 2.x.x):

    gem install rvm-capistrano (or gem install rvm1-capistrano3 for version 3.x)   

Install postgres on server

    sudo apt-get install postgresql postgresql-server-dev-9.1
    (Or sudo apt-get install postgresql-contrib-9.1 if dev version above does not meet requirements of your project)
    gem install pg -- --with-pg-config=/usr/bin/pg_config

Create new postgres user on server

    sudo -u postgres psql
    create user username with password 'password';
    alter role username superuser createrole createdb replication;
    create database projectname_production owner username;

Install git-core on server

    sudo apt-get install git-core

Install bundler on server

    gem install bundler

setup nginx on server

    sudo apt-get install nginx
    nginx -h
    cat /etc/init.d/nginx
    /etc/init.d/nginx -h
    sudo service nginx start
    cd /etc/nginx

LOCAL project nginx and unicorn setup

    Uncomment unicorn in the gemfile
    create config/nginx.conf, config/unicorn.rb & config/unicorn_init.sh files
    chmod +x config/unicorn_init.sh

nginx.conf (change projectname and username to match your directory structure!)
    
    upstream unicorn {
      server unix:/tmp/unicorn.projectname.sock fail_timeout=0;
    }

    server {
      listen 80 default deferred;
      # server_name example.com;
      root /home/username/apps/projectname/current/public;

      location ^~ /assets/ {
        gzip_static on;
        expires max;
        add_header Cache-Control public;
      }

      try_files $uri/index.html $uri @unicorn;
      location @unicorn {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://unicorn;
      }

      error_page 500 502 503 504 /500.html;
      client_max_body_size 4G;
      keepalive_timeout 10;
    }

config/unicorn.rb

    root = "/home/username/apps/projectname/current"
    working_directory root
    pid "#{root}/tmp/pids/unicorn.pid"
    stderr_path "#{root}/log/unicorn.log"
    stdout_path "#{root}/log/unicorn.log"

    listen "/tmp/unicorn.projectname.sock"
    worker_processes 2
    timeout 30

    # Force the bundler gemfile environment variable to
    # reference the capistrano "current" symlink
    before_exec do |_|
      ENV["BUNDLE_GEMFILE"] = File.join(root, 'Gemfile')
    end

 config/unicorn_init.sh

    #!/bin/sh
    ### BEGIN INIT INFO
    # Provides:          unicorn
    # Required-Start:    $remote_fs $syslog
    # Required-Stop:     $remote_fs $syslog
    # Default-Start:     2 3 4 5
    # Default-Stop:      0 1 6
    # Short-Description: Manage unicorn server
    # Description:       Start, stop, restart unicorn server for a specific application.
    ### END INIT INFO
    set -e

    # Feel free to change any of the following variables for your app:
    TIMEOUT=${TIMEOUT-60}
    APP_ROOT=/home/username/apps/projectname/current
    PID=$APP_ROOT/tmp/pids/unicorn.pid
    CMD="cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production"
    AS_USER=username
    set -u

    OLD_PIN="$PID.oldbin"

    sig () {
      test -s "$PID" && kill -$1 `cat $PID`
    }

    oldsig () {
      test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
    }

    run () {
      if [ "$(id -un)" = "$AS_USER" ]; then
        eval $1
      else
        su -c "$1" - $AS_USER
      fi
    }

    case "$1" in
    start)
      sig 0 && echo >&2 "Already running" && exit 0
      run "$CMD"
      ;;
    stop)
      sig QUIT && exit 0
      echo >&2 "Not running"
      ;;
    force-stop)
      sig TERM && exit 0
      echo >&2 "Not running"
      ;;
    restart|reload)
      sig HUP && echo reloaded OK && exit 0
      echo >&2 "Couldn't reload, starting '$CMD' instead"
      run "$CMD"
      ;;
    upgrade)
      if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
      then
        n=$TIMEOUT
        while test -s $OLD_PIN && test $n -ge 0
        do
          printf '.' && sleep 1 && n=$(( $n - 1 ))
        done
        echo

        if test $n -lt 0 && test -s $OLD_PIN
        then
          echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
          exit 1
        fi
        exit 0
      fi
      echo >&2 "Couldn't upgrade, starting '$CMD' instead"
      run "$CMD"
      ;;
    reopen-logs)
      sig USR1
      ;;
    *)
      echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
      exit 1
      ;;
    esac

Add capistrano and rvm capistrano to project gemfile

    gem 'capistrano', '~>2.15.5'
    gem 'rvm-capistrano'

Create config/deploy.rb files by running following command at root of your local project

    capify .

deploy.rb

    require "bundler/capistrano"
    require "rvm/capistrano"

    server "123.123.123.123", :web, :app, :db, primary: true

    set :application, "projectname"
    set :user, "username"
    set :port, 22
    set :deploy_to, "/home/#{user}/apps/#{application}"
    set :deploy_via, :remote_cache
    set :use_sudo, false

    set :scm, "git"
    set :repository, "git@github.com:username/#{application}.git"
    set :branch, "master"


    default_run_options[:pty] = true
    ssh_options[:forward_agent] = true

    after "deploy", "deploy:cleanup" # keep only the last 5 releases

    namespace :deploy do
      %w[start stop restart].each do |command|
        desc "#{command} unicorn server"
        task command, roles: :app, except: {no_release: true} do
          run "/etc/init.d/unicorn_#{application} #{command}"
        end

        #add DB seed task: http://bit.ly/pvYJsr
        desc "reload the database with seed data"
        task :seed do
          run "cd #{current_path}; bundle exec rake db:seed RAILS_ENV=#{rails_env}"
        end

        #add precompile assets task - only runs if something has changed so should speed things up
        desc "precompile assets"
        task :precompile, :roles => :web, :except => { :no_release => true } do
          from = source.next_revision(current_revision)
          if releases.length <= 1 || capture("cd #{latest_release} && #{source.local.log(from)} vendor/assets/ app/assets/ | wc -l").to_i > 0
            run %Q{cd #{latest_release} && #{rake} RAILS_ENV=#{rails_env} #{asset_env} assets:precompile}
          else
            logger.info "Skipping asset pre-compilation because there were no asset changes"
          end
        end
      end

      task :setup_config, roles: :app do
        sudo "ln -nfs #{current_path}/config/nginx.conf /etc/nginx/sites-enabled/#{application}"
        sudo "ln -nfs #{current_path}/config/unicorn_init.sh /etc/init.d/unicorn_#{application}"
        run "mkdir -p #{shared_path}/config"
        put File.read("config/database.example.yml"), "#{shared_path}/config/database.yml"
        puts "Now edit the config files in #{shared_path}."
      end
      after "deploy:setup", "deploy:setup_config"

      task :symlink_config, roles: :app do
        run "ln -nfs #{shared_path}/config/database.yml #{release_path}/config/database.yml"
      end
      after "deploy:finalize_update", "deploy:symlink_config"

      desc "Make sure local git is in sync with remote."
      task :check_revision, roles: :web do
        unless `git rev-parse HEAD` == `git rev-parse origin/master`
          puts "WARNING: HEAD is not the same as origin/master"
          puts "Run `git push` to sync changes."
          exit
        end
      end
      before "deploy", "deploy:check_revision"
    end

Capfile

    load 'deploy'
    load 'deploy/assets'
    load 'config/deploy'

Shake hands with github on server

    ssh github@github.com

    # Troubleshooting: permission denied(public key)
    # https://help.github.com/articles/error-permission-denied-publickey

    #I suggest creating a Deploy key and adding it to the server instead of AgentForwarding, ehich i was not reliably able to get working.
    #Just follow this guide to create the SSH key on the server: https://help.github.com/articles/generating-ssh-keys
    #copy key on server with 
      more ~/.ssh/id_rsa.pub
    #Then add the key to the Github project's Deploy keys
    #Shake hands with github from server should then work

(ALTERNATE method of adding ssh key to server if using AgentForwarding: Add ssh key to digitalocean; copies your local key to server I think?)

    cat ~/.ssh/id_rsa.pub | ssh -p 22 username@123.123.123.123 'cat >> ~/.ssh/authorized_keys'

Create repo and push to github

    # Add config/database.yml to .gitignore
    #copy your database file to a new file with a different name and add it to the repo (FYI, it might be safer to have this file totally in a different location on server)
    cp config/database.yml config/database.example.yml
    git init
    git add .
    git commit -m "Inital Commit"
    git remote add origin git@github.com:username/reponame
    git push origin master

deployment

    cap deploy:setup
    # edit /home/username/apps/projectname/shared/config/database.yml on server
    cap deploy:cold

after deploy:cold

    sudo rm /etc/nginx/sites-enabled/default
    sudo service nginx restart
    sudo update-rc.d -f unicorn_projectname defaults
    
Make changes and deploy

    # Make changes
    git add .
    git commit -m "Changes"
    git push origin master
    cap deploy

Troubleshooting:

    # If errors re: Nokogiri or libxslt libxm12, try installing on server:
    http://nokogiri.org/tutorials/installing_nokogiri.html

    # Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.
    sudo apt-get install nodejs

    # host not found in upstream "unicorn" in /etc/nginx/sites-enabled/
    need to edit /etc/nginx/nginx.conf to add upstream host (see nginx.conf above), i.e. server unix:/tmp/unicorn.projectname.sock fail_timeout=0;